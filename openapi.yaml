openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user
    description: Operations about user
  - name: user_personal
    description: Operations about user_personal
paths:
  /users/{gid}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: gid
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid gid supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: gid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid gid supplied
        '404':
          description: User not found
  /users/{gid}/user_personals:
    patch:
      tags:
        - user_personal
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: gid
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPersonal'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid gid supplied
        '404':
          description: User not found
  /user_personals:
    post:
      tags:
        - user_personal
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPersonal'
      responses:
        default:
          $ref: '#/components/requestBodies/UserGid'
components:
  schemas:
    User:
      type: object
      properties:
        gid:
          type: string
          example: "100-00000-xxxx"
        user_personal:
          $ref: '#/components/schemas/UserPersonal'
    UserPersonal:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: James
        reading_first_name:
          type: string
          example: John
        reading_last_name:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        sex:
          type: integer
          example: 1
        birthday:
          type: string
          example: '2001-01-01'
        age:
          type: integer
          example: 21
        postal_code:
          type: string
          example: '110-0000'
        city:
          type: string
          example: 'Tokyo-to Shibuya-ku'
        address:
          type: string
          example: 'Jinguumae 1-1-1'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserGid:
      description: List of user object
      content:
        application/json:
          schema:
            type: object
            properties:
              gid:
                type: string
